{"version":3,"sources":["../../src/socket-handler/index.js"],"names":["handler","mongoose","require","io","socket","Account","connection","model","Online","firebasetoken","handshake","headers","auth","verifyIdToken","fireuser","sid","id","uid","findOne","account","create","set","name","_id","save","remove","location","online","find","populate","list","map","o","displayName","avatar","emit","on","data","count","console","log","get","message"],"mappings":"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","file":"index.js","sourcesContent":["import firebase from '../libs/firebase';\n\nconst mongoose = require('mongoose');\n\n/**\n * @param {SocketIO.Server} io\n */\nexport function handler(io) {\n    io.on('connection', connection);\n\n    /**\n     * @param {SocketIO.Socket} socket\n     */\n    async function connection(socket) {\n        try {\n            let Account = mongoose.connection.model('Account');\n            let Online = mongoose.connection.model('Online');\n\n            let {firebasetoken} = socket.handshake.headers;\n\n            let fireuser = await firebase.auth().verifyIdToken(firebasetoken);\n            let sid = socket.id;\n            let uid = fireuser.uid;\n\n            let account = await Account.findOne({ uid })\n\n            if (!account) {\n                account = await Account.create({ uid })\n                account.set('displayName', fireuser.name || '路人');\n                account.set('avatar', `https://mc-heads.net/avatar/${account._id}/100.png`);\n                account = await account.save();\n            }\n\n            await Online.remove({ uid });\n\n            let online = await Online.create({\n                uid,\n                sid,\n                account: account,\n                location: account.location\n            });\n\n            let list = await Online.find().populate('account');\n\n            list = list.map((o) => {\n                return {\n                    sid: o.sid,\n                    location: o.location,\n                    displayName: o.account.displayName,\n                    avatar: o.account.avatar\n                }\n            });\n\n            //傳送專屬 sid\n            socket.emit('welcome', { sid, list: list });\n\n            //廣播登入\n            io.emit('join', {\n                sid,\n                displayName: account.displayName,\n                avatar: account.avatar,\n                location: online.location\n            });\n\n            //更新資料\n            socket.on('update', async (data) => {\n                if (data.location) {\n                    online.set('location', data.location);\n                }\n\n                if (data.avatar) {\n                    account.set('avatar', data.avatar);\n                }\n\n                if (data.displayName) {\n                    account.set('displayName', data.displayName);\n                }\n\n                try {\n                    account = await account.save();\n                    online = await online.save();\n\n                    let count = await Online.count();\n\n                    io.emit('update', {\n                        sid,\n                        displayName: account.displayName,\n                        avatar: account.avatar,\n                        location: online.location\n                    }, { count });\n                } catch (e) {\n                    console.log('(update)', e);\n                }\n            });\n\n            //取回線上清單\n            socket.on('refresh', async () => {\n                let list = await Online.find().populate('account');\n\n                list = list.map((o) => {\n                    return {\n                        sid: o.sid,\n                        location: o.location,\n                        displayName: o.account.displayName,\n                        avatar: o.account.avatar\n                    }\n                });\n\n                socket.emit('refresh', { list });\n            });\n\n            //斷線\n            socket.on('disconnect', async () => {\n                console.log('disconnect');\n                account.set('location', online.get('location'));\n\n                try {\n                    await account.save();\n                    await online.remove({ uid });\n                } catch (ex) {\n                    console.log('(disconnect)', ex);\n                }\n\n                io.emit('leave', { sid });\n            });\n        } catch (ex) {\n            console.log(ex);\n\n            //強制斷線\n            socket.emit('error', { message: ex.message });\n        }\n\n    }\n}"]}